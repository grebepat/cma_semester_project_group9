---
title: Cycling Secrets
subtitle: Decoding Bike Messenger Paths for Efficiency
author: Maurin Huonder and Patrick Greber
date: "18.06.2024"
format: 
  html:
    code-fold: true
    toc: true
    toc-location: left
lang: en  
bibliography: bibliography.bib
execute:
  warning: false
  message: false
  cache:   true
  echo:    false
  output:  false
---

# Install Packages

```{r install required packages}


options(repos = c(CRAN = "https://cran.rstudio.com"))

install.packages("pacman")
library("pacman")


p_install("dplyr", force = FALSE)
p_install("ggplot2", force = FALSE)
p_install("readr", force = FALSE)
p_install("tidyr", force = FALSE)
p_install("sf", force = FALSE)
p_install("terra", force = FALSE)
p_install("tmap", force = FALSE)
p_install("zoo", force = FALSE)
p_install("units", force = FALSE)
p_install("patchwork", force = FALSE)
p_install("tidyverse", force = FALSE)
p_install("leaflet", force = FALSE)
p_install("shiny", force = FALSE)
p_install("XML", force = FALSE)
p_install("lubridate", force = FALSE)
p_install("ggh4x", force = FALSE)
p_install("forcats", force = FALSE)
p_install("purrr", force = FALSE)
p_install("viridis", force = FALSE)
p_install("httr", force = FALSE)
p_install("hereR", force = FALSE)
p_install("sp", force = FALSE)
p_install("ggpubr", force = TRUE)
p_install("png", force = FALSE)
p_install("grid", force = FALSE)
p_install("raster", force = FALSE)
p_install("gridExtra", force = FALSE)
p_install("RColorBrewer", force = FALSE)


```

# Load libraries

Load necessary libraries

```{r load necessary libraries}
#| echo: true

  
  
library("ggh4x")
library("dplyr")
library("ggplot2")
library("tidyr")
library("sf")
library("sp")
library("terra")
library("tmap")
library("zoo")
library("tidyverse")
library("leaflet")
library("XML")
library("lubridate")
library("forcats")
library("httr")
library("hereR")
library("png")
library("gridExtra")
library("RColorBrewer")
library("purrr")


```

# Task 1: Import Express: Bringing GPS Data Onboard

Import gps data from bike messengers

```{r import raw gps data}



## generate a list of all filenames including the path from the subfolder they are stored in
file <- list.files("gps_files_shared", recursive = TRUE, pattern = "\\.gpx$", full.names = TRUE)


## Function to extract messenger and id from file path
extract_info <- function(file) {
  messenger <- as.factor(gsub(".*/gps_files_([^/]+)/.*", "\\1", file))
  id <- as.factor(paste(gsub('.*/(.*).gpx','\\1', file), gsub(".*/gps_files_([^/]+)/.*", "\\1", file), sep = "_"))
  list(messenger = messenger, id = id)
}


## Function to process each file
process_file <- function(file) {
  df <- st_read(file, "track_points")
  
  info <- extract_info(file)
  df$messenger <- info$messenger
  df$id <- info$id

  df_sf <- st_as_sf(df, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
  df_sf <- st_transform(df_sf, crs = 2056)
  df_sf$shift <- gsub('.*/(.*).gpx','\\1', file)
  df_sf$x <- st_coordinates(df_sf)[,1]
  df_sf$y <- st_coordinates(df_sf)[,2]
  df_sf <- select(df_sf, id, messenger, shift, time, x, y, ele, geometry)
  df_sf$origin <- file
  df_sf
}


## Apply the function to each file using purrr's map function
single_routes <- purrr::map(file, process_file)


## Combine all results
all_routes <- do.call(rbind, single_routes)
save(all_routes, file = "rda_files/all_routes.rda")


## Seperate file into raeubertochter and donner and save output for visualizations under preprocessing.qmd
raeubertochter_raw <- filter(all_routes, messenger == "raeubertochter")
save(raeubertochter_raw, file = "rda_files/raeubertochter_raw.rda")

donner_raw <- filter(all_routes, messenger == "donner")
save(donner_raw, file = "rda_files/donner_raw.rda")


## Our raw data covers one shift per messenger, a total of 11'699 fixes were recorded:
### raeubertochter: 23.10.2023, 12:59:44 - 17:51:21, 7102 fixes
### donner: 30.01.2024, 10:21:41 - 22:14:27, 4597 fixes

```






::: {#fig-raw_data layout-ncol=2}
![RÃ¤ubertochter](figures/raeubertochter_raw.png){#fig-raeubertochter_raw}

![Donner](figures/donner_raw.png){#fig-donner_raw}

RAW DATA
:::















# Task 3: Signal Sync: Assessing Sampling Intervals Across Messenger GPS Systems

```{r assessing sampling intervals}
#| echo: true



## If a larger sampling grid is needed: selecting every 10th row from  movement data:
###all_routes <- all_routes[seq(from = 1, to = #nrow(all_routes), by = 5), ]


## calculate rowwise time difference
all_routes <- all_routes |> 
    group_by(id) |> 
    mutate(
    time_difference = as.numeric(difftime(time, lag(time), units = "secs"))) |>
    ungroup()


## How do the time difference differ between messengers?
all_routes |> 
  group_by(id) |> 
  filter(time_difference <= 30) |> # remove outliers to get a clearer view on the average sampling interval
  summarise(
    mean <- mean(time_difference, na.rm = T)
    )

## Both with similar time difference between fixes, raeubertochter with slightly shorter intervals


## max value between two fixes, in min
max(all_routes$time_difference, na.rm = T) / 60

## max time difference at 50min

```

Visualize sampling interval

```{r visualize sampling intervals via ggplot}
#| echo: true
#| output:  true

## Quick overview how time differences distribute
p_sampling_interval <- ggplot(all_routes, aes(x = time_difference)) +
  geom_histogram(binwidth = 0.25, col = "white", fill = "grey25") +
  scale_y_log10() +
  scale_x_log10() +
  labs(x = "Time Difference in sec. (Log Scale)", y = "Count (Log Scale)") +
  ggtitle("Histogram of Time Differences with Log Y Axis and Log X Axis") +
  facet_wrap(all_routes$id) +
  theme_minimal()


## show histogram
print(p_sampling_interval)

# Both with similar but slightly different sampling regimes, raeubertochter with an intervall of ~1 second. It seems that static time is already removed in here dataset -> strava data! Most time differences between 1 and 10 seconds, some outliers at more than 1000 seconds

# Donner with more variation between fixes, but still short intervals, might need another segmentation...

```
