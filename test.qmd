---
title: Cycling Secrets
subtitle: Decoding Bike Messenger Paths for Efficiency
author: Maurin Huonder and Patrick Greber
date: "18.06.2024"
format: 
  html:
    code-fold: true
execute:
  warning: false
  message: false
  cache:   true
lang: en  
bibliography: bibliography.bib
fig-caption: true
---

# Install Packages

```{r install required packages}

#| echo: false
#| warning: false
#| message: false
#| results: 'hide'

options(repos = c(CRAN = "https://cran.rstudio.com"))

install.packages("pacman")
library("pacman")


p_install("dplyr", force = FALSE)
p_install("ggplot2", force = FALSE)
p_install("readr", force = FALSE)
p_install("tidyr", force = FALSE)
p_install("sf", force = FALSE)
p_install("terra", force = FALSE)
p_install("tmap", force = FALSE)
p_install("zoo", force = FALSE)
p_install("units", force = FALSE)
p_install("patchwork", force = FALSE)
p_install("tidyverse", force = FALSE)
p_install("leaflet", force = FALSE)
p_install("shiny", force = FALSE)
p_install("XML", force = FALSE)
p_install("lubridate", force = FALSE)
p_install("ggh4x", force = FALSE)
p_install("forcats", force = FALSE)
p_install("purrr", force = FALSE)
p_install("viridis", force = FALSE)
p_install("httr", force = FALSE)
p_install("hereR", force = FALSE)
p_install("sp", force = FALSE)
p_install("ggpubr", force = TRUE)
p_install("png", force = FALSE)
p_install("grid", force = FALSE)
p_install("raster", force = FALSE)
p_install("gridExtra", force = FALSE)
p_install("RColorBrewer", force = FALSE)


```

# Load libraries

Load necessary libraries

```{r load necessary libraries}

#| echo: false
#| warning: false
#| message: false

library("ggh4x")
library("dplyr")
library("ggplot2")
library("tidyr")
library("sf")
library("sp")
library("terra")
library("tmap")
library("zoo")
library("tidyverse")
library("leaflet")
library("XML")
library("lubridate")
library("forcats")
library("httr")
library("hereR")
library("png")
library("gridExtra")
library("RColorBrewer")


```

# Task 1: Import Express: Bringing GPS Data Onboard

Import gps data from bike messengers

```{r import raw gps data}

#| warning: false
#| message: false
#| results: 'hide'

## generate a list of all filenames including the path from the subfolder they are stored in
file <- list.files("gps_files_shared", recursive = TRUE, pattern = "\\.gpx$", full.names = TRUE)


## Function to extract messenger and id from file path
extract_info <- function(file) {
  messenger <- as.factor(gsub(".*/gps_files_([^/]+)/.*", "\\1", file))
  id <- as.factor(paste(gsub('.*/(.*).gpx','\\1', file), gsub(".*/gps_files_([^/]+)/.*", "\\1", file), sep = "_"))
  list(messenger = messenger, id = id)
}


## Function to process each file
process_file <- function(file) {
  df <- st_read(file, "track_points")
  
  info <- extract_info(file)
  df$messenger <- info$messenger
  df$id <- info$id
  
  df_sf <- st_as_sf(df, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
  df_sf <- st_transform(df_sf, crs = 2056)
  df_sf$shift <- gsub('.*/(.*).gpx','\\1', file)
  df_sf$x <- st_coordinates(df_sf)[,1]
  df_sf$y <- st_coordinates(df_sf)[,2]
  df_sf <- select(df_sf, id, messenger, shift, time, x, y, ele, geometry)
  
  df_sf$origin <- file
  df_sf
}


## Apply the function to each file using purrr's map function
single_routes <- purrr::map(file, process_file)


## Combine all results
all_routes <- do.call(rbind, single_routes)

## Seperate file into raeubertochter and donner
raeubertochter_raw <- filter(all_routes, messenger == "raeubertochter")
donner_raw <- filter(all_routes, messenger == "donner")


## Our raw data covers one shift per messenger, a total of 11'699 fixes were recorded:
### raeubertochter: 23.10.2023, 12:59:44 - 17:51:21, 7102 fixes
### donner: 30.01.2024, 10:21:41 - 22:14:27, 4597 fixes

```

# Task 2: Import Spatial Data

Import spatial data. Geopackage was preprocessed using Quantum GIS Version 3.34.5.

```{r import spatial data}

#| warning: false
#| message: false
#| results: 'hide'

## All Spatial Data is stored in a geopackage called basic_data. Basic_data consists of several layers such as the street network, surface type or housing footprint. The layers were preprocessed and cliped to the extent of the city outline of zurich using Quantum GIS Version 3.34.5


## Show layers in basic_data.gpkg
st_layers("gis_files/basic_data.gpkg")


## Import street network from zurich, based on the swisstlm3d
streets <- read_sf("gis_files/basic_data.gpkg", "street_network_z") |> 
   select(objektart, geom) |> 
  mutate(
    objektart = as.factor(objektart),
    width = as.numeric(substr(objektart, start = 1, stop = 1)),
  ) |> 
  na.omit()


## Import city border of zurich
outline <- read_sf("gis_files/basic_data.gpkg", "city_outline")


## Import housing footprint of zurich
housing <- read_sf("gis_files/basic_data.gpkg", "housing_footprint") |> 
   select(objektart, geom) |>
  mutate(
    objektart = as.factor(objektart)
  )


## Import surface type of zurich
surface <- read_sf("gis_files/basic_data.gpkg", "surface_type") |> 
   select(art, geom) |> 
  mutate(
    art = as.factor(art)) |> 
 filter(art == "fliessendes Gewässer" | art == "stehendes Gewässer" | art == "Strasse, Weg" | art == "Verkehrsinsel") |> 
  na.omit()


## Import digital height model DHM25, a set of data representing the 3D form of the earth’s surface without vegetation and buildings
height <- terra::rast("gis_files/dhm25_zh.tif")


```

## Visualize raw Data

Visualize raw GPS data of both messengers using a simple ggplot.

```{r visualize raw data via ggplot, out.width="100%", dpi=500, fig.cap="hahahahaha"}


## Visualize the raw gps data from each messenger


### Raeubertochter
p_raw_raeubertochter <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = raeubertochter_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
    theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90)
  ) +
  labs(title = "Raeubertochter")


### Donner
p_raw_donner <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = donner_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
  theme_minimal() +
  theme(
    legend.position = "none",
     axis.text.x = element_text(angle = 90)
  ) +
  labs(title = "Donner")

## Arrange plots together
grid.arrange(p_raw_raeubertochter,p_raw_donner, nrow=1, ncol= 2)



```

Subsample of raw data in a smaller spatial context

```{r v1, out.width = "150%", dpi=300, fig.cap="du löli"}


## Visualize the raw gps data from each messenger


### Raeubertochter
p_raw_raeubertochter <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = raeubertochter_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
    theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90)
  ) +
  labs(title = "Raeubertochter")


### Donner
p_raw_donner <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = donner_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
  theme_minimal() +
  theme(
    legend.position = "none",
     axis.text.x = element_text(angle = 90)
  ) +
  labs(title = "Donner")

## Arrange plots together
grid.arrange(p_raw_raeubertochter,p_raw_donner, nrow=1, ncol=2)
```



Subsample of raw data in a smaller spatial context

```{r v2, out.width = "100%", dpi=300}

 ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = all_routes, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
  facet_grid(~messenger) +
    theme_minimal() +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", hjust = 0.01, vjust = 4),
    axis.title.x = element_text(margin = margin(t = 20)),  
    axis.title.y = element_text(margin = margin(r = 20)),
    axis.text.x = element_text(angle = 90)
  ) 
 

```




Subsample of raw data in a smaller spatial context

```{r v3, out.width = "100%", dpi=300}

#| label: fig-firstFigure
#| fig-cap: All included posmo tracks from the three data sets colored by mode of transport.


## Visualize the raw gps data from each messenger



 ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = all_routes, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
  facet_grid(~messenger) +
    theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    strip.text = element_text(face = "bold", hjust = 0.01, vjust = 4),
    axis.title.x = element_text(margin = margin(t = 20)),  
    axis.title.y = element_text(margin = margin(r = 20)) 
  ) 
 



```




Subsample of raw data in a smaller spatial context

```{r v4, out.width = "100%", dpi=300}

#| label: fig-firstFigure
#| fig-cap: All included posmo tracks from the three data sets colored by mode of transport.


## Visualize the raw gps data from each messenger



### Raeubertochter
p_raw_raeubertochter <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = raeubertochter_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
    theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    strip.text = element_text(face = "bold", hjust = 0.01, vjust = 4),
    axis.title.x = element_text(margin = margin(t = 20)),  
    axis.title.y = element_text(margin = margin(r = 20)) 
  ) +
  labs(title = "Raeubertochter")


### Donner
p_raw_donner <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = donner_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    strip.text = element_text(face = "bold", hjust = 0.01, vjust = 4),
    axis.title.x = element_text(margin = margin(t = 20)),  
    axis.title.y = element_text(margin = margin(r = 20)) 
  ) +
  labs(title = "Donner")

## Arrange plots together
grid.arrange(p_raw_raeubertochter,p_raw_donner, nrow=1, ncol=2)


```

